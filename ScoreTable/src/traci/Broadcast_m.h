//
// Generated file, do not edit! Created by nedtool 5.7 from traci/Broadcast.msg.
//

#ifndef __VEINS_BROADCAST_M_H
#define __VEINS_BROADCAST_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace veins {

class Broadcast;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>traci/Broadcast.msg:27</tt> by nedtool.
 * <pre>
 * packet Broadcast extends BaseFrame1609_4
 * {
 *     \@customize(true);
 *     string vehID;
 *     string speed;
 *     string timestamp;
 *     //LAddress::L2Type senderAddress = -1;
 *     //int serial = 0;
 * }
 * </pre>
 *
 * Broadcast_Base is only useful if it gets subclassed, and Broadcast is derived from it.
 * The minimum code to be written for Broadcast is the following:
 *
 * <pre>
 * class Broadcast : public Broadcast_Base
 * {
 *   private:
 *     void copy(const Broadcast& other) { ... }

 *   public:
 *     Broadcast(const char *name=nullptr, short kind=0) : Broadcast_Base(name,kind) {}
 *     Broadcast(const Broadcast& other) : Broadcast_Base(other) {copy(other);}
 *     Broadcast& operator=(const Broadcast& other) {if (this==&other) return *this; Broadcast_Base::operator=(other); copy(other); return *this;}
 *     virtual Broadcast *dup() const override {return new Broadcast(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Broadcast_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Broadcast)
 * </pre>
 */
class Broadcast_Base : public ::veins::BaseFrame1609_4
{
  protected:
    omnetpp::opp_string vehID;
    omnetpp::opp_string speed;
    omnetpp::opp_string timestamp;

  private:
    void copy(const Broadcast_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Broadcast_Base&);
    // make constructors protected to avoid instantiation
    Broadcast_Base(const char *name=nullptr, short kind=0);
    Broadcast_Base(const Broadcast_Base& other);
    // make assignment operator protected to force the user override it
    Broadcast_Base& operator=(const Broadcast_Base& other);

  public:
    virtual ~Broadcast_Base();
    virtual Broadcast_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class Broadcast");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getVehID() const;
    virtual void setVehID(const char * vehID);
    virtual const char * getSpeed() const;
    virtual void setSpeed(const char * speed);
    virtual const char * getTimestamp() const;
    virtual void setTimestamp(const char * timestamp);
};

} // namespace veins

#endif // ifndef __VEINS_BROADCAST_M_H

